package ru.geekbrains.lessons;
import java.util.Arrays;


public class mainApp {
    //1 Задать целочисленный массив, состоящий из элементов 0 и 1. Например:
// [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. Написать метод, заменяющий в принятом массиве 0 на 1, 1 на 0
    public static int[] changing0to1and1to0(int[] array){
        for (int i = 0; i < array.length; i++) {
            if (array[i] == 0) array[i] = 1;// меняем содержжимое ячеек массива в зависимости от условий
            else if (array[i] == 1) array[i] = 0;// меняем содержжимое ячеек массива в зависимости от условий
        }
        return array;
    }
    //2 Задать пустой целочисленный массив размером 8. Написать метод, который помощью цикла заполнит
// его значениями 1 4 7 10 13 16 19 22;
    public static int[] createArr8(int[] array){
        if( array.length > 8 || array.length < 8) {
            System.out.println("Введен массив размером отличающимся от 8, массив будет возвращен без измений");
            return array;
        }
        for (int i = 0, j = 0; i < array.length; i++, j = j + 3){
                array[i] = array[i] + j + 1;//заполнение массива нужными значениями
            }
        return array;
    }
    //3 Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ], написать метод, принимающий на вход массив
// и умножающий числа меньше 6 на 2;
    public static int[] lessNumber6WillBeDoubled(int[] array){
        for(int i = 0; i < array.length;i++) {
            if (array[i] < 6) array[i] = array[i] * 2;
        }
            return array;
    }
    //4 * Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
//  и с помощью цикла(-ов) заполнить его диагональные элементы единицами;
    public static void createSquareArray(int size){
        int[][] sqrArray = new int[size][size];
        for(int i = 0,j = 0; i < size; i++,j++){
            sqrArray[i][j] = 1;
        }
        for(int i = 0,j = size - 1; i < size; i++,j--){
            sqrArray[i][j] = 1;
        }
        for (int i = 0; i < sqrArray.length; i++) {
            for (int j = 0; j < sqrArray[0].length; j++) {
                System.out.print(" " + sqrArray[i][j] + " ");
            }
            System.out.println();
        }
        }

    //5 Задать одномерный массив. Написать методы поиска в нём минимального и максимального элемента;
    public static int minMeaningOfArray(int[] array){
        int min = array[0];
        for(int i = 1; i < array.length; i++){
            if (min > array[i])
                min = array[i];
        }
        return min;
    }
    public static int maxMeaningOfArray(int[] array){
        int max = array[0];
        for(int i = 1; i < array.length; i++){
            if (max < array[i])
                max = array[i];
        }
        return max;
    }
    //6. ** Написать метод, в который передается не пустой одномерный целочисленный массив, метод должен вернуть true,
    // если в массиве есть место, в котором сумма левой и правой части массива равны.
    // Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,
    // граница показана символами ||, эти символы в массив не входят.
    public static boolean checkBalance(int[] array){
        int leftSum = 0;
        for(int i = 0; i < array.length; i++){
            leftSum += array[i];
            int rightSum = 0;
            for (int j = 0; j < array.length; j++){
                if (j > i) rightSum += array[j];
            }
            if(leftSum == rightSum){
                return true;
            }
        }
        return false;
    }
    //7 Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или
    //  отрицательным)
    //  при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично.
    //       Для усложнения задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1
    // (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ]. При каком n
    // в какую сторону сдвиг можете выбирать сами.
    static void shiftArrayOn_n_Position(int[] arr, int n) {
        System.out.println("Массив до сортировки: ");
        for (int i : arr) {
            System.out.println(i + " ");
        }

        System.out.println("(n = " + n + ")");

        if (n > 0) {
            for (int i = 0; i < n; i++) {
                // вправо
                int tmp = arr[arr.length - 1];
                for (int j = arr.length - 1; j > 0; j--) {
                    arr[j] = arr[j - 1];
                }
                arr[0] = tmp;
            }
        } else if (n < 0) {
            for (int i = 0; i < -n ; i++) {
                // влево
                int tmp = arr[0];
                for (int j = 0; j < arr.length - 1; j++) {
                    arr[j] = arr[j + 1];
                }
                arr[arr.length - 1] = tmp;
            }
        }

        System.out.println("\nМассив после сортировки:  ");
        for (int i : arr) {
            System.out.println(i + " ");
        }
    }


    public static void main(String[] args) {
        //1 Задать целочисленный массив, состоящий из элементов 0 и 1. Например:
        // [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. Написать метод, заменяющий в принятом массиве 0 на 1, 1 на 0;
        int[] array01 = {1, 1, 1, 0, 0, 0, 1, 1, 1, 0};
        System.out.println(Arrays.toString(changing0to1and1to0(array01)));

        //2 Задать пустой целочисленный массив размером 8. Написать метод, который помощью цикла заполнит
        // его значениями 1 4 7 10 13 16 19 22;
        int[] arr2 = new int[8];
        System.out.println("before:" + Arrays.toString(arr2));
        createArr8(arr2);
        System.out.println("after: " + Arrays.toString(arr2));

        //3 Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ], написать метод, принимающий на вход массив
        // и умножающий числа меньше 6 на 2;
        int[] arrayNumbers = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        lessNumber6WillBeDoubled(arrayNumbers);
        System.out.println(Arrays.toString(arrayNumbers));

        //4 * Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
        // заполнить его диагональные элементы единицами, используя цикл(ы);
        createSquareArray(5);
        //5 Задать одномерный массив. Написать методы поиска в нём минимального и максимального элемента;
        int[] minMaxArray = {6, 6, 8, 12, 45, 100, 145, 220, 6, 8, 99, 3, 7};
        System.out.println(minMeaningOfArray(minMaxArray));
        System.out.println(maxMeaningOfArray(minMaxArray));
        //6 ** Написать метод, в который передается не пустой одномерный целочисленный массив, метод должен
        // вернуть true если в массиве есть место, в котором сумма левой и правой части массива равны. Примеры:
        // checkBalance([1, 1, 1, || 2, 1]) → true, checkBalance ([2, 1, 1, 2, 1]) → false, checkBalance
        // ([10, || 1, 2, 3, 4]) → true. Абстрактная граница показана символами ||, эти символы в массив не входят.
        int[] forCheckBalanceArray = {1, 2, 3, 1, 2, 3};
        System.out.println(checkBalance(forCheckBalanceArray));

   //7 Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или
        //  отрицательным)
        //  при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются циклично.
        //       Для усложнения задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1
        // (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ]. При каком n
         // в какую сторону сдвиг можете выбирать сами.
        int[] shiftArray = {1, 2, 3, 4, 5, 6};
        shiftArrayOn_n_Position(shiftArray, -2);


        System.out.println(Arrays.toString(shiftArray));
    }
}
